{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Timotec\\\\Desktop\\\\DoppleExtend\\\\Dopple-Extend\\\\dopple\\\\src\\\\contexts\\\\DashboardContextProvider.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport DashboardContext from './DashboardContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashhboardContextProvider = ({\n  children\n}) => {\n  _s();\n  const [printerData, setPrinterData] = useState([]);\n  const [orderData, setOrderData] = useState({});\n  const [networkServiceData, setNetworkServiceData] = useState([]);\n  const [companyData, setCompanyData] = useState([]);\n  const completed = 'completed';\n  const confirmed = 'confirmed';\n  const created = 'created';\n  const inProduction = 'in_production';\n  const locked = 'locked';\n  const shipped = 'shipped';\n  const statusData = [created, locked, confirmed, inProduction, shipped, completed];\n  useEffect(() => {\n    const SERVER_HOST = process.env.REACT_APP_BASHBOARD_API_URL;\n    const serviceStatusLabel = status => {\n      switch (status) {\n        case 'ONLINE':\n          return 'online';\n        case 'OFFLINE':\n          return 'offline';\n        case 'WARNING':\n          return 'warning';\n        default:\n          return 'unknown';\n      }\n    };\n    function parsePrinterData(data) {\n      const printerStatus = Object.keys(data.values).filter(key => key.startsWith(\"printer\")).map(key => ({\n        id: key,\n        no: key.split(\"_\")[1],\n        status: data.values[key]\n      }));\n      setPrinterData(printerStatus);\n    }\n    function parseOrderData(orderDatas) {\n      let companies = [];\n      let cleanData = {};\n      Object.keys(orderDatas.values).forEach(key => {\n        let splitKey = key.split(\"_\");\n        let company = splitKey[2];\n        let status = key.replace(\"total_orders_\", \"\").replace(company + \"_\", \"\");\n        if (!companies.includes(company)) {\n          companies.push(company);\n        }\n        cleanData[company] = {\n          ...cleanData[company],\n          [status]: orderDatas.values[key]\n        };\n      });\n      setCompanyData(companies);\n      setOrderData(cleanData);\n    }\n    function parseNetworkServiceData(orderDatas) {\n      let services = Object.keys(orderDatas.values).map(key => {\n        let name = key.replace('_status', '');\n        name = name.split('_').map(word => {\n          return word.charAt(0).toUpperCase() + word.slice(1);\n        }).join(' ');\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `networkItem ${serviceStatusLabel(orderDatas.values[key])}`,\n          children: [\" \", name, \" \", orderDatas.values[key]]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this);\n      });\n      setNetworkServiceData(services);\n    }\n    const es = new EventSource(SERVER_HOST);\n    es.onopen = () => console.log(\">>> Connection opened!\");\n    es.onerror = e => console.log(\"ERROR!\", e);\n    es.addEventListener(\"mqtt_message\", e => {\n      const body = JSON.parse(e.data);\n      const topic = body.topic;\n      const message = body.data;\n      let topicParts = topic.split(\"/\");\n      let type = topicParts[1];\n      const data = JSON.parse(message.toString());\n      if (type === \"PRADA\") {\n        parsePrinterData(data);\n      }\n      if (type === \"ORDER-PORTAL\") {\n        parseOrderData(data);\n      }\n      if (type === 'STATUS-REPORTER') {\n        parseNetworkServiceData(data);\n      }\n    });\n    return () => es.close();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DashboardContext.Provider, {\n    value: {\n      printerData,\n      orderData,\n      networkServiceData,\n      companyData,\n      statusData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n_s(DashhboardContextProvider, \"nK+uYLFnudqwLuIi54Z00mHeW8Y=\");\n_c = DashhboardContextProvider;\nexport default DashhboardContextProvider;\nvar _c;\n$RefreshReg$(_c, \"DashhboardContextProvider\");","map":{"version":3,"names":["useState","useEffect","DashboardContext","jsxDEV","_jsxDEV","DashhboardContextProvider","children","_s","printerData","setPrinterData","orderData","setOrderData","networkServiceData","setNetworkServiceData","companyData","setCompanyData","completed","confirmed","created","inProduction","locked","shipped","statusData","SERVER_HOST","process","env","REACT_APP_BASHBOARD_API_URL","serviceStatusLabel","status","parsePrinterData","data","printerStatus","Object","keys","values","filter","key","startsWith","map","id","no","split","parseOrderData","orderDatas","companies","cleanData","forEach","splitKey","company","replace","includes","push","parseNetworkServiceData","services","name","word","charAt","toUpperCase","slice","join","className","fileName","_jsxFileName","lineNumber","columnNumber","es","EventSource","onopen","console","log","onerror","e","addEventListener","body","JSON","parse","topic","message","topicParts","type","toString","close","Provider","value","_c","$RefreshReg$"],"sources":["C:/Users/Timotec/Desktop/DoppleExtend/Dopple-Extend/dopple/src/contexts/DashboardContextProvider.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport DashboardContext from './DashboardContext';\n\nconst DashhboardContextProvider = ({ children }) => {\n\n    const [printerData, setPrinterData] = useState([]);\n    const [orderData, setOrderData] = useState({});\n    const [networkServiceData, setNetworkServiceData] = useState([]);\n    const [companyData, setCompanyData] = useState([]);\n\n    const completed = 'completed';\n    const confirmed = 'confirmed';\n    const created = 'created';\n    const inProduction = 'in_production';\n    const locked = 'locked';\n    const shipped = 'shipped';\n    const statusData = [created, locked, confirmed, inProduction, shipped, completed];\n\n    useEffect(() => {\n        const SERVER_HOST = process.env.REACT_APP_BASHBOARD_API_URL;\n\n        const serviceStatusLabel = (status) => {\n            switch (status) {\n                case 'ONLINE':\n                    return 'online';\n                case 'OFFLINE':\n                    return 'offline';\n                case 'WARNING':\n                    return 'warning';\n                default:\n                    return 'unknown';\n            }\n        }\n    \n        function parsePrinterData(data) {\n            const printerStatus = Object.keys(data.values)\n                .filter((key) => key.startsWith(\"printer\"))\n                .map((key) => ({\n                    id: key,\n                    no: key.split(\"_\")[1],\n                    status: data.values[key],\n                }));\n            setPrinterData(printerStatus);\n        }\n    \n        function parseOrderData(orderDatas) {\n            let companies = [];\n            let cleanData = {};\n            Object.keys(orderDatas.values).forEach((key) => {\n                let splitKey = key.split(\"_\");\n                let company = splitKey[2];\n                let status = key\n                    .replace(\"total_orders_\", \"\")\n                    .replace(company + \"_\", \"\");\n    \n                if (!companies.includes(company)) {\n                    companies.push(company);\n                }\n    \n                cleanData[company] = {\n                    ...cleanData[company],\n                    [status]: orderDatas.values[key]\n                }\n            });\n    \n            setCompanyData(companies);\n            setOrderData(cleanData);\n        }\n    \n        function parseNetworkServiceData(orderDatas) {\n            let services = Object.keys(orderDatas.values).map((key) => {\n                let name = key.replace('_status', '');\n                name = name.split('_').map((word) => {\n                    return word.charAt(0).toUpperCase() + word.slice(1);\n                }).join(' ');\n                return (\n                    <div key={key} className={`networkItem ${serviceStatusLabel(orderDatas.values[key])}`} > {name} {orderDatas.values[key]}</div>\n                )\n            });\n            setNetworkServiceData(services);\n        }\n\n        const es = new EventSource(SERVER_HOST);\n        es.onopen = () => console.log(\">>> Connection opened!\");\n        es.onerror = (e) => console.log(\"ERROR!\", e);\n\n        es.addEventListener(\"mqtt_message\", (e) => {\n            const body = JSON.parse(e.data);\n\n            const topic = body.topic;\n            const message = body.data;\n\n            let topicParts = topic.split(\"/\");\n            let type = topicParts[1];\n\n            const data = JSON.parse(message.toString());\n\n            if (type === \"PRADA\") {\n                parsePrinterData(data);\n            }\n            if (type === \"ORDER-PORTAL\") {\n                parseOrderData(data);\n            }\n            if (type === 'STATUS-REPORTER') {\n                parseNetworkServiceData(data);\n            }\n        });\n\n        return () => es.close();\n\n    }, []);\n\n    return (\n        <DashboardContext.Provider value={{ printerData, orderData, networkServiceData, companyData, statusData }}>\n            {children}\n        </DashboardContext.Provider>\n    );\n}\n\nexport default DashhboardContextProvider;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,gBAAgB,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,yBAAyB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAEhD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACY,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMgB,SAAS,GAAG,WAAW;EAC7B,MAAMC,SAAS,GAAG,WAAW;EAC7B,MAAMC,OAAO,GAAG,SAAS;EACzB,MAAMC,YAAY,GAAG,eAAe;EACpC,MAAMC,MAAM,GAAG,QAAQ;EACvB,MAAMC,OAAO,GAAG,SAAS;EACzB,MAAMC,UAAU,GAAG,CAACJ,OAAO,EAAEE,MAAM,EAAEH,SAAS,EAAEE,YAAY,EAAEE,OAAO,EAAEL,SAAS,CAAC;EAEjFf,SAAS,CAAC,MAAM;IACZ,MAAMsB,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,2BAA2B;IAE3D,MAAMC,kBAAkB,GAAIC,MAAM,IAAK;MACnC,QAAQA,MAAM;QACV,KAAK,QAAQ;UACT,OAAO,QAAQ;QACnB,KAAK,SAAS;UACV,OAAO,SAAS;QACpB,KAAK,SAAS;UACV,OAAO,SAAS;QACpB;UACI,OAAO,SAAS;MACxB;IACJ,CAAC;IAED,SAASC,gBAAgBA,CAACC,IAAI,EAAE;MAC5B,MAAMC,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACH,IAAI,CAACI,MAAM,CAAC,CACzCC,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACC,UAAU,CAAC,SAAS,CAAC,CAAC,CAC1CC,GAAG,CAAEF,GAAG,KAAM;QACXG,EAAE,EAAEH,GAAG;QACPI,EAAE,EAAEJ,GAAG,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrBb,MAAM,EAAEE,IAAI,CAACI,MAAM,CAACE,GAAG;MAC3B,CAAC,CAAC,CAAC;MACP3B,cAAc,CAACsB,aAAa,CAAC;IACjC;IAEA,SAASW,cAAcA,CAACC,UAAU,EAAE;MAChC,IAAIC,SAAS,GAAG,EAAE;MAClB,IAAIC,SAAS,GAAG,CAAC,CAAC;MAClBb,MAAM,CAACC,IAAI,CAACU,UAAU,CAACT,MAAM,CAAC,CAACY,OAAO,CAAEV,GAAG,IAAK;QAC5C,IAAIW,QAAQ,GAAGX,GAAG,CAACK,KAAK,CAAC,GAAG,CAAC;QAC7B,IAAIO,OAAO,GAAGD,QAAQ,CAAC,CAAC,CAAC;QACzB,IAAInB,MAAM,GAAGQ,GAAG,CACXa,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAC5BA,OAAO,CAACD,OAAO,GAAG,GAAG,EAAE,EAAE,CAAC;QAE/B,IAAI,CAACJ,SAAS,CAACM,QAAQ,CAACF,OAAO,CAAC,EAAE;UAC9BJ,SAAS,CAACO,IAAI,CAACH,OAAO,CAAC;QAC3B;QAEAH,SAAS,CAACG,OAAO,CAAC,GAAG;UACjB,GAAGH,SAAS,CAACG,OAAO,CAAC;UACrB,CAACpB,MAAM,GAAGe,UAAU,CAACT,MAAM,CAACE,GAAG;QACnC,CAAC;MACL,CAAC,CAAC;MAEFrB,cAAc,CAAC6B,SAAS,CAAC;MACzBjC,YAAY,CAACkC,SAAS,CAAC;IAC3B;IAEA,SAASO,uBAAuBA,CAACT,UAAU,EAAE;MACzC,IAAIU,QAAQ,GAAGrB,MAAM,CAACC,IAAI,CAACU,UAAU,CAACT,MAAM,CAAC,CAACI,GAAG,CAAEF,GAAG,IAAK;QACvD,IAAIkB,IAAI,GAAGlB,GAAG,CAACa,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;QACrCK,IAAI,GAAGA,IAAI,CAACb,KAAK,CAAC,GAAG,CAAC,CAACH,GAAG,CAAEiB,IAAI,IAAK;UACjC,OAAOA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;QACZ,oBACIvD,OAAA;UAAewD,SAAS,EAAG,eAAcjC,kBAAkB,CAACgB,UAAU,CAACT,MAAM,CAACE,GAAG,CAAC,CAAE,EAAE;UAAA9B,QAAA,GAAE,GAAC,EAACgD,IAAI,EAAC,GAAC,EAACX,UAAU,CAACT,MAAM,CAACE,GAAG,CAAC;QAAA,GAA7GA,GAAG;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAgH,CAAC;MAEtI,CAAC,CAAC;MACFnD,qBAAqB,CAACwC,QAAQ,CAAC;IACnC;IAEA,MAAMY,EAAE,GAAG,IAAIC,WAAW,CAAC3C,WAAW,CAAC;IACvC0C,EAAE,CAACE,MAAM,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACvDJ,EAAE,CAACK,OAAO,GAAIC,CAAC,IAAKH,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEE,CAAC,CAAC;IAE5CN,EAAE,CAACO,gBAAgB,CAAC,cAAc,EAAGD,CAAC,IAAK;MACvC,MAAME,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,CAAC,CAACzC,IAAI,CAAC;MAE/B,MAAM8C,KAAK,GAAGH,IAAI,CAACG,KAAK;MACxB,MAAMC,OAAO,GAAGJ,IAAI,CAAC3C,IAAI;MAEzB,IAAIgD,UAAU,GAAGF,KAAK,CAACnC,KAAK,CAAC,GAAG,CAAC;MACjC,IAAIsC,IAAI,GAAGD,UAAU,CAAC,CAAC,CAAC;MAExB,MAAMhD,IAAI,GAAG4C,IAAI,CAACC,KAAK,CAACE,OAAO,CAACG,QAAQ,CAAC,CAAC,CAAC;MAE3C,IAAID,IAAI,KAAK,OAAO,EAAE;QAClBlD,gBAAgB,CAACC,IAAI,CAAC;MAC1B;MACA,IAAIiD,IAAI,KAAK,cAAc,EAAE;QACzBrC,cAAc,CAACZ,IAAI,CAAC;MACxB;MACA,IAAIiD,IAAI,KAAK,iBAAiB,EAAE;QAC5B3B,uBAAuB,CAACtB,IAAI,CAAC;MACjC;IACJ,CAAC,CAAC;IAEF,OAAO,MAAMmC,EAAE,CAACgB,KAAK,CAAC,CAAC;EAE3B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI7E,OAAA,CAACF,gBAAgB,CAACgF,QAAQ;IAACC,KAAK,EAAE;MAAE3E,WAAW;MAAEE,SAAS;MAAEE,kBAAkB;MAAEE,WAAW;MAAEQ;IAAW,CAAE;IAAAhB,QAAA,EACrGA;EAAQ;IAAAuD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAEpC,CAAC;AAAAzD,EAAA,CAlHKF,yBAAyB;AAAA+E,EAAA,GAAzB/E,yBAAyB;AAoH/B,eAAeA,yBAAyB;AAAC,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}